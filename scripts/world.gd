extends Node

"""This demo shows how to evolve arcade-style cars to successfully complete a track.
This is accomplished by assigning fitness based on how many degrees around the track
a car has driven, and regularly starting a new generation where the fittest individuals
are more prevalent.

New generations are started based on a timer (generation_step), because a lot of
cars end up just loitering around the track, and I haven't implemented a method
to detect this yet. This may cause successful agents to be stopped prematurely however.
"""

const MAX_FOOD = 1000
const FOOD_SPAWN_RADIUS = 1800
const SLIME_SPAWN_RADIUS = 1750

var random = RandomNumberGenerator.new()

var clock: Timer
var curr_clock_time = 0
var time_since_last_gen = 0
# every generation_step a new generation is made. this gets increased over time.
var generation_step = 15

# fitness treshold is 100 secs
var fitness_threshold = 100

var is_ready = false

@onready var food_scene: Resource = preload("res://scenes/food.tscn")
@onready var ga: GeneticAlgorithm = GeneticAlgorithm.new(11, 4, "res://scenes/Slime.tscn")

func _ready() -> void:
	"""creates ga, adds the GeneticAlgorithm node as a child and places
	the agent_bodies at the starting position of the track.
	"""
	add_food()
	add_child(ga)
	add_initial_slimes()
	$Timer.start(1)
	is_ready = true
	
func _generate_random_vector(_range):
	var length = random.randf_range(-_range, _range)
	var angle = random.randf_range(0, 360)
	var rand_vector = $"..".position + Vector2(length, 0).rotated(angle)
	return rand_vector

func _on_clock_time_step() -> void:
	curr_clock_time += 1
	time_since_last_gen += 1
	
	var are_all_agents_dead = true
	for agent in ga.curr_agents:
		if not agent.is_dead:
			are_all_agents_dead = false
			break
			
	if are_all_agents_dead:
		curr_clock_time += generation_step - time_since_last_gen
	
	if curr_clock_time % generation_step == 0:
		time_since_last_gen = 0
		var highest_agent_age = 0.0
		for agent in ga.curr_agents:
			highest_agent_age = maxf(highest_agent_age, agent.get_age())
		print("The oldest agent lived for " + str(highest_agent_age))
		
		print("=====Generation Step=====")
		ga.evaluate_generation()
		print("=========================")
		
		reset_food()
		var agents = ga.next_generation()
		#add_food()
		# check if the best agent exceeded the fitness threshold
		#if ga.curr_best.fitness > fitness_threshold:
			# either resume with next generation or switch to demo-choosing scene
			# the END
		# go to the next gen
		print(agents.size(), " agents were spawned")
		for agent in agents:
			agent.body.position = _generate_random_vector(SLIME_SPAWN_RADIUS)
			add_child(agent.body)
		
		# if folks start crossing the generation_step bound, increase the generation_step
		if highest_agent_age >= generation_step - 1:
			generation_step += 15
			print("Increased gen step to " + str(generation_step))
	
	$"../Camera2D/Label".text = "Time: " + str(curr_clock_time) + "\nGen: " + str(ga.curr_generation) + "\nGen Step: " + str(generation_step)

func add_initial_slimes() -> void:
	"""Adds the bodies scenes generated by the ga to the tree, and removes the old ones.
	"""
	for i in Params.population_size:
		var agent = ga.create_initial_agent()
		agent.body.position = _generate_random_vector(SLIME_SPAWN_RADIUS)
		add_child(agent.body)
		
func add_food() -> void:
	print(MAX_FOOD, " new food items were added")
	for i in MAX_FOOD:
		var food = food_scene.instantiate() as Area2D
		food.position = _generate_random_vector(FOOD_SPAWN_RADIUS)
		add_child(food)

func reset_food() -> void:
	var food_items = get_tree().get_nodes_in_group("food")
	for food in food_items:
		food.position = _generate_random_vector(FOOD_SPAWN_RADIUS)
		
	var missing_count = MAX_FOOD - food_items.size()
	print(missing_count, " new food items were added to the existing ", food_items.size())
	for i in missing_count:
		var food = food_scene.instantiate() as Area2D
		food.position = _generate_random_vector(FOOD_SPAWN_RADIUS)
		add_child(food)
		
		
